services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: project3-backend
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - DATABASE_URL=jdbc:postgresql://postgres:5432/project3
      - DATABASE_USERNAME=project3_user
      - DATABASE_PASSWORD=project3_password
      - JWT_SECRET=veryLongAndSecureSecretKeyForJWTTokensAtLeast32CharactersLong
      - GEMINI_API_KEY=${GEMINI_API_KEY:-}
      - GEMINI_PROJECT_ID=${GEMINI_PROJECT_ID:-}
      - MAIL_USERNAME=${MAIL_USERNAME:-}
      - MAIL_PASSWORD=${MAIL_PASSWORD:-}
      - LOG_LEVEL=INFO
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - project3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: project3-postgres
    environment:
      - POSTGRES_DB=project3
      - POSTGRES_USER=project3_user
      - POSTGRES_PASSWORD=project3_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - project3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U project3_user -d project3"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Redis for caching (optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: project3-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - project3-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx for load balancing and static files (production)
  nginx:
    image: nginx:alpine
    container_name: project3-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - project3-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  project3-network:
    driver: bridge 